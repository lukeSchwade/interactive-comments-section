//Primaries
$moderate-blue: hsl(238, 40%, 52%);
$soft-red: hsl(358, 79%, 66%);
$light-grayish-blue: hsl(239, 57%, 85%); //+/- btn
$pale-red: hsl(357, 100%, 86%);

//Neutrals
$dark-blue: hsl(212, 24%, 26%);
$grayish-blue: hsl(211, 10%, 45%);
$light-gray: hsl(223, 19%, 93%);
$very-light-gray: hsl(228, 33%, 97%);
$white: hsl(0, 0%, 100%);

$breakpoints: (
    'to-x-small'    : ( max-width:  375px ),
    'to-small'      : ( max-width:  766px ),
    'small'         : ( min-width:  767px ),
    'to-medium'     : ( max-width:  991px ),
    'medium'        : ( min-width:  992px ),
    'to-large'      : ( min-width: 1199px ),
    'large'         : ( min-width: 1200px ),
    'to-x-large'    : ( min-width: 1599px ),
    'x-large'       : ( min-width: 1600px )
);
//Media query mixins, you can add these anywhere to make media-specific alterations
//List of media breakpoints, assuming mobile first, the default will be smaller than 766
@mixin media($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
        @content;
        }
    }

    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}
@mixin flex-container ($direction: row){
    display: flex;
    flex-direction: $direction;
}

@mixin commentFormat($color: $grayish-blue, $weight:400){
    font-size: 16px;
    color: $color;
    font-weight: $weight;

}
//End non-specific mixins here

@mixin roundedEdges($roundness: 8px){
    border-radius: $roundness;
}

@mixin commentBlock {
    background-color: $white;
    padding: 1em;
    @include roundedEdges(8px);
}
@mixin roundButton ($color: $white, $backgroundColor: $moderate-blue){
    color: $white;
    background-color: $backgroundColor;
    @include roundedEdges;
}

* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
    font-family: "Rubik";
    font-size: 16px;
}
p {
    color: $grayish-blue;
    line-height: 1.5em;
}
@mixin dontSquish {
    flex:none;
}


body {
    @include flex-container(column);
    align-items: center;
    background-color: $very-light-gray;
    padding-top: 5vh;
}

.main-page-container {
    width:90%;
    @include media('small') {
        max-width: 70%;
    }
    @include media ('large'){
        max-width: 60%;
    }
}

#comments-section {
    @include flex-container(column);
    gap: 1.5em;
}
.comment, .add-comment-container, .dropdown-container {
    @include commentBlock;

}
.dropdown-container {
    max-width: max-content;
    padding: 0.75em;
    @include commentFormat();
}

select {
    // A reset of styles, including removing the default dropdown arrow
    appearance: none;
    // Additional resets for further consistency
    border:none;
    outline: 1px solid $light-gray;
    padding: 0.25em 0.5em;
    margin: 0 0 0 .5em;
    font-family: inherit;
    font-size: inherit;
    cursor: inherit;
    cursor: pointer;
    line-height: 1.1;
    @include roundedEdges(4px);
    background-color: $very-light-gray;

}


//GRID DISPLAY FOR SINGLE COMMENT TREE
.comment-tree-grid-container {
    display: grid;
    grid-template-columns: 0.75em 1fr;
    grid-template-rows: max-content auto;
    grid-column-gap: 0px;
    
    .parent-comment { 
        grid-area: 1 / 1 / 2 / 3; 
    }
    .divider { 
        grid-area: 2 / 1 / 3 / 2; 
        border-left: 2px solid $light-gray;
        display: none;

    }

    .child-comment-gridblock { 
        grid-area: 2 / 2 / 3 / 3; 
        @include flex-container(column);
        gap: 1em;
    }
    @include media('small'){
        grid-template-columns: 1em 1fr;
    }
    @include media('large'){
        grid-template-columns: 2em 1fr;
    }
}

//unhide the divider if the parent has child comments inside the replies container
.comment-tree-grid-container:has(.child-comment-gridblock > *){
    grid-row-gap: 1em;
    .divider {
        display: block;
    }
}
//GRID DISPLAY FOR INDIVIDUAL COMMENTS
//Mobile comment layout is different from PC 
.comment {
    display: grid;
    grid-template-columns: 1fr 2fr;
    grid-template-rows: repeat(3, min-content);
    grid-column-gap: 1em;
    grid-row-gap: 1em;
    @include media('small'){
        grid-template-columns: auto 1.5fr max-content ;
        grid-template-rows: min-content auto;
        grid-column-gap: 1.3em;
    }

}

.vote-container-gridblock {
    grid-area: 3 / 1 / 4 / 2;
    @include media('small'){
        grid-area: 1 / 1 / 3 / 2;
    }
}
.comment-meta-gridblock {
    grid-area: 1 / 1 / 2 / 3; 
    @include media('small'){
        grid-area: 1 / 2 / 2 / 3;
    }
}
.reply-bar-gridblock {
    grid-area: 3 / 2 / 4 / 3;
    @include media('small'){
        grid-area: 1 / 3 / 2 / 4;

    }
}
.comment-content-gridblock {
    grid-area: 2 / 1 / 3 / 3;
    @include media('small'){
        grid-area: 2 / 2 / 3 / 4;

    }
}

.comment > [class*="-gridblock"]{
    @include flex-container;
}

.reply-bar-gridblock {
    align-items: center;
    justify-content: flex-end;
    .reply-edit-bar > button:not(:last-child){
        margin-right: 1em;
    }
    .reply-edit-bar svg {
        position:relative;
        top:2px;
    }
}
//End Grid Display
.comment-meta {
    @include flex-container;
    .user-avatar {
        height: 30px;
        width: 30px;
        border-radius: 10em;
        background-color: $grayish-blue;
    }
    align-items: center;
    gap: 1em;
    .username {
        @include commentFormat($dark-blue, 500);
    }
    .time-ago {
        @include commentFormat($weight:400);
    }
}

button {
    border: none;
    background-color: transparent;
    cursor: pointer;
}

.reply-btn, .vote-container {
    color: $moderate-blue;
    font-weight: 500;
}
.delete-btn {
    color: $soft-red;
    font-weight: 500;
}
.vote-container {
    background-color: $light-gray;
    align-items: center;
    justify-content: space-between;
    padding: 0.5em;
    min-width: 100px;
    max-height: 120px;
    .vote-btn {
        height: 16px;
        width: 16px;
        @include flex-container;
        align-items: center;
    }
    .btn-img {
        margin: auto;
        width: inherit;
        height: auto;
    }
    @include roundedEdges(8px);
    @include flex-container;
    @include media ('small'){
        flex-direction: column;
        min-width: 100%;
        min-height: 100px;
        max-height: 100px;

    }
}

//Pertaining to user
.you-flag {
    background-color: $moderate-blue;
    @include commentFormat($white, 500);
    font-size: 14px;
    @include roundedEdges(4px);
    padding: 0.2em 0.5em; 
}

.add-comment-container {
    display: grid;
    grid-template-columns: min-content auto min-content;
    grid-template-rows: max-content min-content;
    grid-column-gap: 1em;
    grid-row-gap: 1em;

    @include media('small'){
            @include flex-container(row);
            justify-content: space-between;
            gap: 1em;
    }

    .user-avatar {
        grid-area: 2 / 1 / 3 / 2;
        height: 40px;
        width: 40px;
        @include media('small'){
           flex-basis: 40px;
        }
    }
    .add-comment__input-container {
        grid-area: 1 / 1 / 2 / 4;;
        

        @include media('small'){
            flex-basis: auto;
            width: 100%;
            height: 100%;
        }
    }
    .add-comment__btn {
        grid-area: 2 / 3 / 3 / 4;
        @include roundButton($white, $moderate-blue);
        font-weight: 500;
        padding: .75em 1.5em;
        height: fit-content;

        @include media('small'){
            flex: 0 1 auto;
        }
    }

    
}

.edit-comment__btn {
    @include roundButton($white, $moderate-blue);
    font-weight: 500;
        padding: .75em 1.5em;
        height: fit-content;

        @include media('small'){
            flex: 0 1 auto;
        }
}
.textarea-container {
    width: 100%;
}

.edit-container {
    gap: 1em;
}

.submit-comment__input {
    padding: .5em 1em;
    resize: none;
    width: 100%;
    height: 6em;
    @include roundedEdges(8px);
    border: 1px solid $light-gray;
}
.submit-comment__input:focus {
    outline: 1px solid $moderate-blue;
}

//ERROR MODAL 
.error-modal {
    position: fixed;
    bottom: 10px;
    left: 45vw;
    background-color: $soft-red;
    color: $light-gray;
    font-size: 12px;
    min-width: 20px;
    padding: 1em;
}

.fade-in-visible {
    visibility: visible;
    opacity: 1;
    transition: opacity 0.25s linear;
}
.fade-in-hidden {
    visibility: hidden;
    opacity: 0;
    transition: visibility 0s 0.75s, opacity 0.5s linear;
}
//DELETE MODAL
.delete-comment-modal {
    display: none;
    position: sticky;
    left: 0;
    top: 0;
    z-index: 3;
    background-color: rgba(0,0,0,0.4);
    width: 100%;
    height: 100%;
    align-content: center;
    .modal-content {
        @include roundedEdges();
        position: relative;
        margin: auto;
        background-color: $white;
        padding: 2em;
        width: 90%;
        max-width: 400px;
        box-shadow: 0 4px 10px 0 rgba(0,0,0,0.2),0 4px 20px 0 rgba(0,0,0,0.19);
    }
    h2 {
        font-size: 20px;
        color: $dark-blue;
    }
    p {
        margin: 1em 0em;
    }
    button {
        padding: 1em 1.5em;
        font-weight: 500;
        flex: 1;
    }
    .cancel-btn {
        @include roundButton($backgroundColor: $grayish-blue);
    }
    .confirm-delete-btn{
        @include roundButton($backgroundColor: $soft-red );
    }
    .delete-btn-container {
        @include flex-container(row);
        gap: 1em;
        justify-content: space-between;

    }
}

.hidden {
    display: none !important;
}

button {
    transition: all 150ms;
    position: relative;

}
button:not(.vote-btn):hover{
    filter:brightness(125%);
}
button:not(.vote-btn):active {
    filter:brightness(80%);
    transition-duration: 50ms;
    top: 2px;
}

.vote-btn:hover{
    filter: brightness(90%);
    transform: scale(1.05) ;

}
.vote-btn:active{
    filter:brightness(60%);
    transition-duration: 50ms;
    top: 2px;
}

//Active state for vote buttons
.vote-btn.active{
        filter: brightness(50%);
}

.deleted-comment {
    .comment-content, .username {
        opacity: 70%;
    }
}


// this query will apply from widths larger then 1200px
// meaning you have the same for mobile and tablet
//  @include media('large') {
//    width: 25%;
// }